adsadasdadasdasd

RRQ (ReadReQuest) filename / mode
WRQ (Write ReQuest) filename / mode
DATA block number (num seq)
ACK (Acknowledgement) block number (num seq)
ERROR error code / error message


RECIEVE
1. send RRQ wtih filename to server
2. server recieves and checks if file is available/has access.
    - if an error ocurs (not found for example), send ERROR with custom code and message
    - END
3. server sends N block of the file
4. client sends ACK for the block number
5. go back to step 3 until no more blocks are left.

If ACK comes with an unexpected number, END with an error.
Data size: 512bytes. -> if packet <512 == last packet.

WRITE
1. send WRQ wtih filename to server
2. server recieves and checks if file is available/has access.
    - if an error ocurs (not found for example), send ERROR with custom code and message
    - END
3. server sends N block of the file
4. client sends ACK for the block number
5. go back to step 3 until no more blocks are left.


Timeout: if no naswer for Xseconds, resend last packet (up to 3 times)
Order: if recieved out of order, discard and END
File: 
Type: if expecting ACK and got RRQ


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

RRQ (ReadReQuest) filename / mode
WRQ (Write ReQuest) filename / mode
DATA block number (num seq)
ACK (Acknowledgement) block number (num seq)
ERROR error code / error message


RECIEVE
1. send RRQ wtih filename to server
2. server recieves and checks if file is available/has access.
    - if an error ocurs (not found for example), send ERROR with custom code and message
    - END
3. server sends N block of the file
4. client sends ACK for the block number
5. go back to step 3 until no more blocks are left.

If ACK comes with an unexpected number, END with an error.
Data size: 512bytes. -> if packet <512 == last packet.

WRITE
1. send WRQ wtih filename to server
2. server recieves and checks if file is available/has access.
    - if an error ocurs (not found for example), send ERROR with custom code and message
    - END
3. server sends N block of the file
4. client sends ACK for the block number
5. go back to step 3 until no more blocks are left.


Timeout: if no naswer for Xseconds, resend last packet (up to 3 times)
Order: if recieved out of order, discard and END
File: 
Type: if expecting ACK and got RRQ

1234
